105. Construct Binary Tree from Preorder and Inorder Traversal

class Solution {
public:

int findPosition(vector<int>& inorder,int &n,int &Element){
  for(int i=0;i<n;i++){
    if(inorder[i]==Element){
      return i;
    }
  }
  return -1;
}

TreeNode* buildTreeFromPreInorder(vector<int>& preorder, vector<int>& inorder,int &size,int &preIndex,int inorderStart,int inorderEnd){
  //base case
  if(preIndex>=size || inorderStart>inorderEnd ){
    return NULL;
  }
  // step-1:
  int Element=preorder[preIndex++];
  TreeNode*root=new TreeNode(Element);
  int pos=findPosition(inorder,size,Element);

  //step-2:
  root->left=buildTreeFromPreInorder(preorder,inorder,size,preIndex,inorderStart,pos-1);
  root->right=buildTreeFromPreInorder(preorder,inorder,size,preIndex,pos+1,inorderEnd);

  return root;
  
}
   
   
 TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
  int preIndex=0;
  int inorderStart=0;
 
 int size=preorder.size();
 int inorderEnd=size-1;

return buildTreeFromPreInorder(preorder,inorder,size,preIndex,inorderStart,inorderEnd);
 }
};
