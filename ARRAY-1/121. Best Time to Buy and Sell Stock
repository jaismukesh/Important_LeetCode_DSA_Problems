//APPROACH-1: USING TWO LOOPS TC-O(n^2)

class Solution {
public:
    int maxProfit(vector<int>& prices) {
       int  profit=0;

        for(int i=0;i<prices.size();i++){
            for(int j=i+1;j<prices.size();j++){
                if(prices[j]>prices[i]){
                    profit=max(profit,prices[j]-prices[i]);
                }
            }
        }
        return profit;
    }
};

-------------------------------------------------------------------------------------------------------------------------------

//Approach-2: using Min heap TC:O(N)
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int profit=0;
        priority_queue <int, vector<int>, greater<int> > pq;

        for(int i=0;i<prices.size();i++){
        pq.push(prices[i]);
        profit=max(profit,prices[i]-pq.top());
        }
        return profit;
    }
};

--------------------------------------------------------------------------------------------------------------------------------------

//APPROACH-3: TC:O(N)

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int res=0,lowest=INT_MAX;
        for(int i=0;i<prices.size();i++){
            if(prices[i]<lowest){
                lowest=prices[i];
            }
            else if(res<prices[i]-lowest){
                res=prices[i]-lowest;
            }
        }
        return res;
    }
};
