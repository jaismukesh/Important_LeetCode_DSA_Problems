Approach-1: Bruteforce TC:O(n^3)

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int maxi=INT_MIN;
         
        for(int i=0;i<nums.size();i++){
            for(int j=0;j<nums.size();j++){
                int sum=0;

                for(int k=i;k<=j;k++){
                    sum=sum+nums[k];
                   
                }
               
                maxi=max(maxi,sum);
            }
        }
        return maxi;
    }
};

------------------------------------------------------------------------------------------------------------------------------------

//approach-2 : better TC:O(n^2)

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n=nums.size();
         int maxi = INT_MIN; // maximum sum

    for (int i = 0; i < n; i++) {
        int sum = 0;
        for (int j = i; j < n; j++) {
            // current subarray = arr[i.....j]

            //add the current element arr[j]
            // to the sum i.e. sum of arr[i...j-1]
            sum += nums[j];

            maxi = max(maxi, sum); // getting the maximum
        }
    }

    return maxi;
    }
};

----------------------------------------------------------------------------------------------------------------------

//APPROACH-3:OPTIMAL SOLUTION TC:O(N)

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int sum=0;
        int maxi=nums[0];
        for(int i=0;i<nums.size();i++){
            sum+=nums[i];

            maxi=max(maxi,sum);

            if(sum<0){
                sum=0;
            }
        }
        return maxi;
    }
};
