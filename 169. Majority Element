//approach-1 TC:O(N logN +N)
              SC:O(N)

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        unordered_map<int,int>map;

        for(int i=0;i<nums.size();i++){
            map[nums[i]]++;
        }

        for(auto x:map){
            if(x.second>nums.size()/2){
                return x.first;
            }
        }
        return -1;
    }
};
//

//APPROACH-2:USING MOORE'S VOTING ALGO
TC:O(N)
SC:O(N)


class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int count=0;
        int ele;

        for(int i=0;i<nums.size();i++){
            if(count==0){
                
                count=1;
                ele=nums[i];
            }

           else if(nums[i]==ele) count++;
            else count--;
        }

        int count1=0;

        for(int i=0;i<nums.size();i++){
            if(nums[i]==ele) count1++;
        }

        if(count1>(nums.size()/2)){
            return ele;
        }
        return -1;
    }
};
