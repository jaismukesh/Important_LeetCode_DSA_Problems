// APPROACH -1 USING RECURION (THROW TLE ERROE)

class Solution {
public:

    int RecursiveSol(vector<int>& coins, int amount){
         if(amount==0) return 0;

        if(amount<0) return INT_MAX;
        int mini=INT_MAX;
        for(int i=0;i<coins.size();i++){
            int ans=RecursiveSol(coins, amount-coins[i]);
            if(ans!=INT_MAX){
                mini=min(mini,1+ans);
            }
        }
      
      return mini;
    }
    int coinChange(vector<int>& coins, int amount) {
       int ans=RecursiveSol(coins,amount);
      if(ans==INT_MAX) return -1;
      else return ans;
    }
};


// APPROACH-2 : TOP-DOWN APPROACH

class Solution {
public:

   int SolveTopDown(vector<int>& coins, int amount,vector<int>&dp){
         if(amount==0) return 0;

        if(amount<0) return INT_MAX;
        int mini=INT_MAX;

        if(dp[amount] !=-1){
            return dp[amount];
        }
        for(int i=0;i<coins.size();i++){
            int ans=SolveTopDown(coins, amount-coins[i],dp);
            if(ans!=INT_MAX){
                mini=min(mini,1+ans);
            }
        }
      dp[amount]=mini;
      return dp[amount];
   }
    int coinChange(vector<int>& coins, int amount) {
       vector<int>dp(amount+1,-1);
       int ans= SolveTopDown(coins,amount,dp);

       if(ans==INT_MAX) return -1;
       else return ans;
    }
};

//APPROACH-3: BOTTOM UP APPROACH

class Solution {
public:

int SolveBottomUp(vector<int>& coins, int amount){
    vector<int>dp(amount+1,INT_MAX);
    dp[0]=0;

    for(int i=1;i<=amount;i++){
        int mini=INT_MAX;
        for(int j=0;j<coins.size();j++){

            if(i-coins[j]>=0){
            int ans=dp[coins, i-coins[j]];
            if(ans!=INT_MAX){
                mini=min(mini,1+ans);
            }
            }
        }
        dp[i]=mini;
    }
    return dp[amount];
}

  
    int coinChange(vector<int>& coins, int amount) {
       int ans= SolveBottomUp(coins,amount);

       if(ans==INT_MAX) return -1;
       else return ans;
    }
};
